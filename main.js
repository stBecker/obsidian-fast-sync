/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FastSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// constants.ts
var ENCRYPTION_VALIDATION_PAYLOAD = "FastSyncVaultEncryptionCheck_v1.0";
var ENCRYPTION_VALIDATION_IV = new Uint8Array([83, 105, 109, 112, 108, 101, 83, 121, 110, 99, 73, 86]);
var UPLOAD_CHUNK_SIZE_BYTES = 10 * 1024 * 1024;
var DOWNLOAD_CHUNK_FILE_COUNT = 100;
var DEFAULT_SETTINGS = {
  serverUrl: "",
  apiKey: "",
  syncInterval: 60,
  lastSync: 0,
  deletionQueue: [],
  vaultId: "",
  fullRehashInterval: 15,
  maxFileSizeMB: 100,
  syncPlugins: false,
  encryptionPassword: "",
  enableVerboseLogging: false
};

// encryption.ts
async function deriveEncryptionKey(password) {
  if (!password) {
    return null;
  }
  try {
    const encoder = new TextEncoder();
    const keyMaterial = await crypto.subtle.importKey("raw", encoder.encode(password), { name: "PBKDF2" }, false, [
      "deriveBits",
      "deriveKey"
    ]);
    const salt = encoder.encode("FastSyncSalt_v1");
    return await crypto.subtle.deriveKey(
      {
        name: "PBKDF2",
        salt,
        iterations: 15e4,
        hash: "SHA-256"
      },
      keyMaterial,
      { name: "AES-GCM", length: 256 },
      true,
      ["encrypt", "decrypt"]
    );
  } catch (error) {
    console.error("Failed to derive encryption key:", error);
    throw new Error("Failed to initialize encryption. Check password or browser support.");
  }
}
async function encryptText(text, encryptionKey) {
  if (!encryptionKey) throw new Error("Encryption key is not available.");
  if (text === null || text === void 0) throw new Error("Cannot encrypt null or undefined text.");
  try {
    const iv = crypto.getRandomValues(new Uint8Array(12));
    const encoder = new TextEncoder();
    const encodedText = encoder.encode(text);
    const encrypted = await crypto.subtle.encrypt({ name: "AES-GCM", iv }, encryptionKey, encodedText);
    const encryptedArray = new Uint8Array(encrypted);
    const combinedArray = new Uint8Array(iv.length + encryptedArray.length);
    combinedArray.set(iv, 0);
    combinedArray.set(encryptedArray, iv.length);
    return btoa(
      Array.from(combinedArray).map((byte) => String.fromCharCode(byte)).join("")
    );
  } catch (error) {
    console.error("Encryption failed:", error);
    throw new Error("Failed to encrypt data.");
  }
}
async function decryptText(base64Ciphertext, encryptionKey) {
  if (!encryptionKey) throw new Error("Decryption key is not available.");
  if (!base64Ciphertext) throw new Error("Cannot decrypt empty ciphertext.");
  try {
    const combinedArray = Uint8Array.from(atob(base64Ciphertext), (c) => c.charCodeAt(0));
    if (combinedArray.length < 12) {
      throw new Error("Invalid ciphertext format (too short).");
    }
    const iv = combinedArray.slice(0, 12);
    const encrypted = combinedArray.slice(12);
    const decrypted = await crypto.subtle.decrypt({ name: "AES-GCM", iv }, encryptionKey, encrypted);
    return new TextDecoder().decode(decrypted);
  } catch (error) {
    console.error("Decryption failed:", error);
    if (error instanceof DOMException && error.name === "OperationError") {
      throw new Error("Decryption failed. Key mismatch or data corrupted?");
    }
    throw new Error("Failed to decrypt data.");
  }
}
async function encryptValidationPayload(encryptionKey) {
  if (!encryptionKey) throw new Error("Encryption key not available for validation payload.");
  try {
    const encoder = new TextEncoder();
    const encodedPayload = encoder.encode(ENCRYPTION_VALIDATION_PAYLOAD);
    const encrypted = await crypto.subtle.encrypt({ name: "AES-GCM", iv: ENCRYPTION_VALIDATION_IV }, encryptionKey, encodedPayload);
    const encryptedArray = new Uint8Array(encrypted);
    return btoa(
      Array.from(encryptedArray).map((byte) => String.fromCharCode(byte)).join("")
    );
  } catch (error) {
    console.error("Failed to encrypt validation payload:", error);
    throw new Error("Could not prepare encryption validation.");
  }
}
async function verifyEncryptionValidationPayload(encryptedPayload, encryptionKey) {
  if (!encryptionKey) throw new Error("Decryption key not available for validation.");
  if (!encryptedPayload) {
    console.error("Server did not provide encryption validation marker, but client expects encryption.");
    throw new Error(
      "Encryption Mismatch: Server state appears unencrypted or uses an older format. Please Force Push to encrypt or disable client encryption."
    );
  }
  try {
    const encryptedArray = Uint8Array.from(atob(encryptedPayload), (c) => c.charCodeAt(0));
    const decrypted = await crypto.subtle.decrypt({ name: "AES-GCM", iv: ENCRYPTION_VALIDATION_IV }, encryptionKey, encryptedArray);
    const decryptedValidation = new TextDecoder().decode(decrypted);
    if (decryptedValidation !== ENCRYPTION_VALIDATION_PAYLOAD) {
      console.error("Decrypted validation payload mismatch!", {
        expected: ENCRYPTION_VALIDATION_PAYLOAD,
        got: decryptedValidation
      });
      throw new Error("Encryption Key Mismatch! Please verify your password.");
    }
    console.info("Encryption validation successful.");
    return true;
  } catch (error) {
    console.error("Failed to decrypt or validate server encryption marker:", error);
    if (error instanceof Error && error.message.includes("Encryption Key Mismatch")) {
      throw error;
    }
    if (error instanceof DOMException && error.name === "OperationError") {
      throw new Error("Encryption Key Mismatch! Please verify your password.");
    }
    if (error instanceof Error && error.message.includes("Decryption failed")) {
      throw new Error("Encryption Key Mismatch! Please verify your password.");
    }
    throw new Error("Encryption Key Mismatch or Corrupted Data! Please verify your password.");
  }
}

// api.ts
function getApiHeaders(apiKey) {
  return {
    "Accept-Encoding": "gzip",
    "Content-Type": "application/json",
    "X-API-Key": apiKey
  };
}
async function fetchWithRetry(url, options, retries = 1) {
  try {
    const response = await fetch(url, options);
    if (!response.ok && response.status >= 500 && retries > 0) {
      console.warn(`Request to ${url} failed with status ${response.status}. Retrying (${retries} left)...`);
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      return fetchWithRetry(url, options, retries - 1);
    }
    return response;
  } catch (error) {
    if (retries > 0 && error instanceof TypeError) {
      console.warn(`Request to ${url} failed with network error. Retrying (${retries} left)...`);
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      return fetchWithRetry(url, options, retries - 1);
    }
    console.error(`Request to ${url} failed after retries or with non-retryable error:`, error);
    throw error;
  }
}
async function downloadRemoteState(options) {
  const { settings, encryptionKey } = options;
  const start = performance.now();
  const url = `${settings.serverUrl}/v1/${settings.vaultId}/state`;
  const headers = getApiHeaders(settings.apiKey);
  try {
    const response = await fetchWithRetry(url, { headers });
    if (!response.ok) {
      const errorBody = await response.text().catch(() => "Could not read error body");
      console.error(`State download failed: ${response.status} ${response.statusText}`, errorBody);
      throw new Error(`State download failed: ${response.statusText} (Status: ${response.status})`);
    }
    const result = await response.json();
    console.info(`State download completed in ${(performance.now() - start).toFixed(2)}ms`);
    const processedState = result.state || {};
    if (settings.encryptionPassword && encryptionKey) {
      const startDecryption = performance.now();
      console.info("Client expects encryption, validating server state...");
      try {
        await verifyEncryptionValidationPayload(result.encryptionValidation, encryptionKey);
        console.info(`Validated server state for ${Object.keys(processedState).length} stable IDs.`);
      } catch (error) {
        console.error("Encryption validation failed:", error);
        throw error;
      }
      console.info(`State validation completed in ${(performance.now() - startDecryption).toFixed(2)}ms`);
    } else if (settings.encryptionPassword && !encryptionKey) {
      throw new Error("Encryption key not initialized. Cannot process potentially encrypted state.");
    } else if (!settings.encryptionPassword && result.encryptionValidation) {
      console.warn("Server has encryption validation marker, but client encryption is disabled. State reflects encrypted paths.");
      throw new Error(
        "Encryption Mismatch: Server data seems encrypted, but client encryption is disabled. Enable encryption or Force Push."
      );
    }
    return {
      state: processedState,
      encryptionValidation: result.encryptionValidation
    };
  } catch (error) {
    console.error("Error during downloadRemoteState:", error);
    if (error instanceof Error && (error.message.includes("Encryption Mismatch") || error.message.includes("Encryption Key Mismatch") || error.message.includes("Decryption failed"))) {
      throw error;
    }
    throw new Error(`Failed to download or process remote state: ${error instanceof Error ? error.message : String(error)}`);
  }
}
async function uploadFileChanges(uploadEntries, options) {
  const { settings, encryptionKey } = options;
  if (uploadEntries.length === 0) {
    console.debug("No changes to upload.");
    return;
  }
  const start = performance.now();
  const url = `${settings.serverUrl}/v1/${settings.vaultId}/uploadChanges`;
  const headers = getApiHeaders(settings.apiKey);
  const payload = { data: uploadEntries };
  try {
    if (settings.encryptionPassword && encryptionKey) {
      payload.encryptionValidation = await encryptValidationPayload(encryptionKey);
    } else {
      delete payload.encryptionValidation;
    }
    const uploadStart = performance.now();
    const response = await fetchWithRetry(url, {
      method: "POST",
      headers,
      body: JSON.stringify(payload)
    });
    if (!response.ok) {
      const errorBody = await response.text().catch(() => "Could not read error body");
      let detail = `Upload failed: ${response.statusText} (Status: ${response.status})`;
      if (response.status === 409) {
        try {
          detail = (await response.json()).detail || detail;
        } catch (e) {
        }
      }
      console.error(detail, errorBody);
      throw new Error(detail);
    }
    console.info(
      `Uploaded ${payload.data.length} changes in ${(performance.now() - start).toFixed(2)}ms (Upload request: ${(performance.now() - uploadStart).toFixed(2)}ms)`
    );
  } catch (error) {
    console.error("Error during uploadFileChanges:", error);
    if (error instanceof Error && (error.message.includes("Encryption Mismatch") || error.message.includes("Encryption Key Mismatch"))) {
      throw error;
    }
    throw new Error(`Failed to upload changes: ${error instanceof Error ? error.message : String(error)}`);
  }
}
async function downloadFilesContent(encryptedFilePaths, options) {
  const { settings } = options;
  if (encryptedFilePaths.length === 0) {
    return [];
  }
  const start = performance.now();
  const url = `${settings.serverUrl}/v1/${settings.vaultId}/downloadFiles`;
  const headers = getApiHeaders(settings.apiKey);
  const requestPayload = { encryptedFilePaths };
  try {
    const response = await fetchWithRetry(url, {
      method: "POST",
      headers,
      body: JSON.stringify(requestPayload)
    });
    if (!response.ok) {
      const errorBody = await response.text().catch(() => "Could not read error body");
      console.error(`File download request failed: ${response.status} ${response.statusText}`, errorBody);
      throw new Error(`File download failed: ${response.statusText} (Status: ${response.status})`);
    }
    const result = await response.json();
    console.info(`Downloaded content for ${result.files.length} encrypted paths in ${(performance.now() - start).toFixed(2)}ms`);
    return result.files;
  } catch (error) {
    console.error("Error during downloadFilesContent:", error);
    throw new Error(`Failed to download file content: ${error instanceof Error ? error.message : String(error)}`);
  }
}
async function getAllServerFilesList(options) {
  const { settings, encryptionKey } = options;
  const start = performance.now();
  const url = `${settings.serverUrl}/v1/${settings.vaultId}/allFiles`;
  const headers = getApiHeaders(settings.apiKey);
  delete headers["Content-Type"];
  try {
    const response = await fetchWithRetry(url, { headers });
    if (!response.ok) {
      const errorBody = await response.text().catch(() => "Could not read error body");
      console.error(`Failed to get all files list: ${response.status} ${response.statusText}`, errorBody);
      throw new Error(`Failed to get files list: ${response.statusText} (Status: ${response.status})`);
    }
    const result = await response.json();
    console.info(`All files list retrieved (${result.length} files raw) in ${(performance.now() - start).toFixed(2)}ms`);
    if (!settings.encryptionPassword && result.length > 0 && result[0].currentEncryptedFilePath.length > 100) {
      console.warn("Received file list paths look potentially encrypted, but client encryption is disabled.");
    } else if (settings.encryptionPassword && !encryptionKey) {
      console.error("Encryption key not initialized. Cannot decrypt file paths from list if needed later.");
    }
    console.info(`Processed all files list contains ${result.length} files.`);
    return result;
  } catch (error) {
    console.error("Error during getAllServerFilesList:", error);
    throw new Error(`Failed to retrieve file list from server: ${error instanceof Error ? error.message : String(error)}`);
  }
}
async function getFileHistoryFromServer(stableId, options) {
  const { settings, encryptionKey } = options;
  const start = performance.now();
  const encodedStableId = encodeURIComponent(stableId);
  const url = `${settings.serverUrl}/v1/${settings.vaultId}/fileHistory/${encodedStableId}`;
  const headers = getApiHeaders(settings.apiKey);
  delete headers["Content-Type"];
  try {
    const response = await fetchWithRetry(url, { headers });
    if (!response.ok) {
      if (response.status === 404) {
        console.info(`File history not found for stableId ${stableId.substring(0, 10)}...`);
        return [];
      }
      const errorBody = await response.text().catch(() => "Could not read error body");
      console.error(
        `Failed to get file history for stableId ${stableId.substring(0, 10)}: ${response.status} ${response.statusText}`,
        errorBody
      );
      throw new Error(`Failed to get file history: ${response.statusText} (Status: ${response.status})`);
    }
    const result = await response.json();
    console.info(
      `File history retrieved for stableId ${stableId.substring(0, 10)} (${result.length} versions raw) in ${(performance.now() - start).toFixed(2)}ms`
    );
    let processedHistory = [];
    if (settings.encryptionPassword && encryptionKey && result.length > 0) {
      const decryptionStart = performance.now();
      console.info(`Decrypting content for ${result.length} history entries for stableId ${stableId.substring(0, 10)}...`);
      try {
        for (const entry of result) {
          const decryptedFilePath = await decryptText(entry.filePath, encryptionKey);
          const decryptedContent = entry.content ? await decryptText(entry.content, encryptionKey) : "";
          processedHistory.push({
            filePath: decryptedFilePath,
            content: decryptedContent,
            mtime: entry.mtime,
            contentHash: entry.contentHash,
            isBinary: entry.isBinary,
            version_time: entry.version_time
          });
        }
        console.info(`Decryption of history entries complete in ${(performance.now() - decryptionStart).toFixed(2)}ms`);
      } catch (decErr) {
        console.error(`Failed to decrypt history entry for stableId ${stableId.substring(0, 10)}:`, decErr);
        throw new Error("Failed to decrypt file history content. Key mismatch or data corrupted?");
      }
    } else if (!settings.encryptionPassword && result.length > 0) {
      processedHistory = result.map((entry) => ({
        filePath: entry.filePath,
        content: entry.content,
        mtime: entry.mtime,
        contentHash: entry.contentHash,
        isBinary: entry.isBinary,
        version_time: entry.version_time
      }));
      if (result[0].filePath.length > 100) {
        console.warn(
          `Received history for stableId ${stableId.substring(0, 10)} looks potentially encrypted, but client encryption is disabled.`
        );
      }
    } else if (settings.encryptionPassword && !encryptionKey) {
      throw new Error("Encryption key not initialized. Cannot decrypt file history.");
    }
    return processedHistory;
  } catch (error) {
    console.error(`Error during getFileHistoryFromServer for stableId ${stableId.substring(0, 10)}:`, error);
    if (error instanceof Error && (error.message.includes("Key Mismatch") || error.message.includes("Decryption failed"))) {
      throw error;
    }
    throw new Error(
      `Failed to retrieve file history for ${stableId.substring(0, 10)}: ${error instanceof Error ? error.message : String(error)}`
    );
  }
}
async function resetServerStateForForcePush(options) {
  const { settings, encryptionKey } = options;
  const start = performance.now();
  const url = `${settings.serverUrl}/v1/${settings.vaultId}/forcePushReset`;
  const headers = getApiHeaders(settings.apiKey);
  const payload = {};
  try {
    if (settings.encryptionPassword && encryptionKey) {
      payload.encryptionValidation = await encryptValidationPayload(encryptionKey);
    } else if (settings.encryptionPassword && !encryptionKey) {
      throw new Error("Encryption key not initialized. Cannot prepare force push reset request.");
    }
    const response = await fetchWithRetry(url, {
      method: "POST",
      headers,
      body: JSON.stringify(payload)
    });
    if (!response.ok) {
      const errorBody = await response.text().catch(() => "Could not read error body");
      console.error(`Force push reset failed: ${response.status} ${response.statusText}`, errorBody);
      throw new Error(`Force push reset failed: ${response.statusText} (Status: ${response.status})`);
    }
    const result = await response.json();
    if (result.status !== "reset_success") {
      throw new Error(`Server reported failure during force push reset: ${result.status}`);
    }
    console.warn(`Server state reset successfully for vault ${settings.vaultId} in ${(performance.now() - start).toFixed(2)}ms`);
  } catch (error) {
    console.error("Error during resetServerStateForForcePush:", error);
    throw new Error(`Failed to reset server state for force push: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// settings.ts
var import_obsidian = require("obsidian");
var FastSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Fast Sync Settings" });
    new import_obsidian.Setting(containerEl).setName("Server URL").setDesc("The base URL of your Fast Sync server (e.g., http://localhost:32400)").addText(
      (text) => text.setPlaceholder("Enter server URL").setValue(this.plugin.settings.serverUrl).onChange(async (value) => {
        this.plugin.settings.serverUrl = value.trim().replace(/\/$/, "");
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("The secret API key for authentication with the server.").addText(
      (text) => text.setPlaceholder("Enter API key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
        this.plugin.settings.apiKey = value.trim();
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Vault ID").setDesc("Identifier for this vault on the server. Defaults to vault name.").addText(
      (text) => text.setPlaceholder("Enter vault ID").setValue(this.plugin.settings.vaultId).onChange(async (value) => {
        const trimmedValue = value.trim();
        if (trimmedValue) {
          this.plugin.settings.vaultId = trimmedValue;
        } else {
          this.plugin.settings.vaultId = this.app.vault.getName();
          text.setValue(this.plugin.settings.vaultId);
          new import_obsidian.Notice("Vault ID cannot be empty. Reset to vault name.");
        }
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Sync Behavior" });
    new import_obsidian.Setting(containerEl).setName("Sync Interval").setDesc("How often to automatically sync (in seconds). Minimum 5 seconds.").addText(
      (text) => text.setPlaceholder("e.g., 60").setValue(this.plugin.settings.syncInterval.toString()).onChange(async (value) => {
        let interval = parseInt(value);
        if (isNaN(interval) || interval < 5) {
          interval = 5;
          new import_obsidian.Notice("Sync interval must be at least 5 seconds.");
        }
        this.plugin.settings.syncInterval = interval;
        text.setValue(interval.toString());
        await this.plugin.saveSettings();
        this.plugin.rescheduleSync();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Full Rehash Interval").setDesc(
      "How often (in minutes) to clear the local hash cache and re-check all files against the server. Helps catch inconsistencies. Minimum 5 minutes."
    ).addText(
      (text) => text.setPlaceholder("e.g., 15").setValue(this.plugin.settings.fullRehashInterval.toString()).onChange(async (value) => {
        let interval = parseInt(value);
        if (isNaN(interval) || interval < 5) {
          interval = 5;
          new import_obsidian.Notice("Full rehash interval must be at least 5 minutes.");
        }
        this.plugin.settings.fullRehashInterval = interval;
        text.setValue(interval.toString());
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Maximum File Size (MB)").setDesc("Files larger than this size (in megabytes) will be skipped during sync. Minimum 1 MB.").addText(
      (text) => text.setPlaceholder("e.g., 100").setValue(this.plugin.settings.maxFileSizeMB.toString()).onChange(async (value) => {
        let size = parseInt(value);
        if (isNaN(size) || size < 1) {
          size = 1;
          new import_obsidian.Notice("Maximum file size must be at least 1 MB.");
        }
        this.plugin.settings.maxFileSizeMB = size;
        text.setValue(size.toString());
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Sync Plugins").setDesc("Enable syncing of installed plugin files (main.js, manifest.json, styles.css). Requires Obsidian restart after changing.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.syncPlugins).onChange(async (value) => {
        this.plugin.settings.syncPlugins = value;
        await this.plugin.saveSettings();
        new import_obsidian.Notice("Plugin sync setting changed. Please restart Obsidian for it to take full effect.", 5e3);
      })
    );
    containerEl.createEl("h3", { text: "Encryption" });
    new import_obsidian.Setting(containerEl).setName("Encryption Password").setDesc(
      'Password used to encrypt your data before sending it to the server. Setting or changing this requires a "Force Push" to encrypt existing data or re-encrypt with the new password. Losing this password means losing access to your encrypted data! Leave blank to disable encryption.'
    ).addText(
      (text) => text.setPlaceholder("Leave blank for no encryption").setValue(this.plugin.settings.encryptionPassword).onChange(async (value) => {
        text.inputEl.onblur = async () => {
          const newPassword = text.getValue();
          if (this.plugin.settings.encryptionPassword !== newPassword) {
            const oldPassword = this.plugin.settings.encryptionPassword;
            this.plugin.settings.encryptionPassword = newPassword;
            await this.plugin.saveSettings();
            try {
              await this.plugin.handleEncryptionPasswordChange(oldPassword, newPassword);
              if (newPassword && !oldPassword) {
                new import_obsidian.Notice('Encryption enabled. Please perform a "Force Push" to encrypt your vault on the server.', 1e4);
              } else if (!newPassword && oldPassword) {
                new import_obsidian.Notice('Encryption disabled. Please perform a "Force Push" to store decrypted data on the server.', 1e4);
              } else if (newPassword && oldPassword) {
                new import_obsidian.Notice('Encryption password changed. Please perform a "Force Push" to re-encrypt your vault on the server.', 1e4);
              }
            } catch (error) {
              new import_obsidian.Notice(`Error initializing encryption: ${error.message}`, 1e4);
            }
          }
        };
      })
    );
    containerEl.createEl("h3", { text: "Manual Actions & Status" });
    new import_obsidian.Setting(containerEl).setName("Sync Status").setDesc("Pause or resume automatic background synchronization.").addToggle((toggle) => {
      const updateStatus = () => {
        toggle.setValue(!this.plugin.syncPaused);
        const descEl = toggle.toggleEl.querySelector(".setting-item-description");
        if (descEl) {
          descEl.textContent = this.plugin.syncPaused ? "Sync is currently PAUSED." : "Sync is currently ACTIVE.";
        }
      };
      toggle.onChange(async (value) => {
        this.plugin.syncPaused = !value;
        updateStatus();
        new import_obsidian.Notice(value ? "Sync resumed" : "Sync paused");
        this.plugin.updateStatusBar();
      });
      updateStatus();
    });
    new import_obsidian.Setting(containerEl).setName("Force Push State").setDesc("Overwrite server state with local state. Deletes files on server not present locally. Use with caution!").addButton(
      (button) => button.setButtonText("Force Push").setWarning().onClick(async () => {
        button.setDisabled(true).setButtonText("Pushing...");
        try {
          await this.plugin.forcePushStateToServer();
          new import_obsidian.Notice("Force push initiated. Check logs for details.");
        } catch (e) {
          new import_obsidian.Notice(`Force push failed: ${e.message}`, 1e4);
        } finally {
          button.setDisabled(false).setButtonText("Force Push");
        }
      })
    );
    new import_obsidian.Setting(containerEl).setName("Force Pull State").setDesc("Overwrite local state with server state. Deletes local files not present on server. Use with caution!").addButton(
      (button) => button.setButtonText("Force Pull").setWarning().onClick(async () => {
        button.setDisabled(true).setButtonText("Pulling...");
        try {
          await this.plugin.forcePullStateFromServer();
          new import_obsidian.Notice("Force pull initiated. Check logs for details.");
        } catch (e) {
          new import_obsidian.Notice(`Force pull failed: ${e.message}`, 1e4);
        } finally {
          button.setDisabled(false).setButtonText("Force Pull");
        }
      })
    );
    containerEl.createEl("h3", { text: "Troubleshooting & Logging" });
    new import_obsidian.Setting(containerEl).setName("Verbose Logging").setDesc("Enable detailed logging with access to the log viewer. When disabled, only error logs are emitted to the console.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableVerboseLogging).onChange(async (value) => {
        const oldValue = this.plugin.settings.enableVerboseLogging;
        this.plugin.settings.enableVerboseLogging = value;
        await this.plugin.saveSettings();
        if (oldValue !== value) {
          new import_obsidian.Notice(`Verbose logging ${value ? "enabled" : "disabled"}. Plugin reload required for this change to take effect.`, 5e3);
        }
      })
    );
    new import_obsidian.Setting(containerEl).setName("Clean Empty Folders").setDesc("Manually run the process to remove empty folders within your vault.").addButton(
      (button) => button.setButtonText("Clean Now").onClick(async () => {
        button.setDisabled(true).setButtonText("Cleaning...");
        try {
          await this.plugin.runCleanEmptyFolders();
          new import_obsidian.Notice("Empty folder cleanup complete.");
        } catch (e) {
          new import_obsidian.Notice(`Folder cleanup failed: ${e.message}`, 5e3);
        } finally {
          button.setDisabled(false).setButtonText("Clean Now");
        }
      })
    );
  }
};

// ui/FileHistoryModal.ts
var import_obsidian3 = require("obsidian");

// ui/FileVersionsModal.ts
var import_obsidian2 = require("obsidian");

// utils/encodingUtils.ts
function arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  const len = bytes.byteLength;
  for (let i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}
function base64ToArrayBuffer(base64) {
  const binaryString = window.atob(base64);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes.buffer;
}

// utils/fileUtils.ts
function isImageFile(extension) {
  return ["png", "jpg", "jpeg", "gif", "svg", "webp", "bmp", "ico"].includes(extension.toLowerCase());
}
function isTextFile(extension) {
  return ["md", "txt", "json", "yaml", "yml", "js", "ts", "css", "html", "xml", "csv", "log"].includes(extension.toLowerCase());
}
async function getFileContent(adapter, filePath) {
  var _a;
  const extension = ((_a = filePath.split(".").pop()) == null ? void 0 : _a.toLowerCase()) || "";
  const isBinary = isImageFile(extension);
  if (isBinary) {
    const buffer = await adapter.readBinary(filePath);
    return { content: arrayBufferToBase64(buffer), isBinary: true };
  } else {
    const content = await adapter.read(filePath);
    return { content, isBinary: false };
  }
}
async function getAllUserFiles(vault) {
  return vault.getFiles().filter((file) => {
    const ext = file.extension.toLowerCase();
    const isSupportedType = isTextFile(ext) || isImageFile(ext);
    const isHidden = file.path.split("/").some((part) => part.startsWith("."));
    const isInObsidianDir = file.path.startsWith(vault.configDir);
    return isSupportedType && !isHidden && !isInObsidianDir;
  }).map((file) => file.path);
}
async function getPluginFiles(vault) {
  const files = [];
  const pluginDir = vault.configDir + "/plugins";
  async function recursivelyGetFiles(adapter, path) {
    var _a;
    const dirFiles = [];
    try {
      const contents = await adapter.list(path);
      for (const file of contents.files) {
        const basename = ((_a = file.split("/").pop()) == null ? void 0 : _a.toLowerCase()) || "";
        if (["main.js", "manifest.json", "styles.css"].includes(basename)) {
          dirFiles.push(file);
        }
      }
      for (const subFolder of contents.folders) {
        const subFiles = await recursivelyGetFiles(adapter, subFolder);
        dirFiles.push(...subFiles);
      }
    } catch (error) {
      console.warn(`Error accessing path ${path} during plugin scan:`, error);
    }
    return dirFiles;
  }
  try {
    if (await vault.adapter.exists(pluginDir)) {
      const pluginFiles = await recursivelyGetFiles(vault.adapter, pluginDir);
      files.push(...pluginFiles);
    } else {
      console.info("Plugin directory not found, skipping plugin file scan.");
    }
  } catch (error) {
    console.error("Error scanning for plugin files:", error);
  }
  return files;
}
async function cleanEmptyFolders(adapter, basePath = "/") {
  const isEmpty = async (folder) => {
    try {
      const listResult = await adapter.list(folder);
      if (!listResult) return true;
      if (listResult.files.length > 0) return false;
      for (const subFolder of listResult.folders) {
        if (!await isEmpty(subFolder)) return false;
      }
      return true;
    } catch (e) {
      console.warn(`Error checking if folder is empty ${folder}:`, e);
      return false;
    }
  };
  const deleteIfEmpty = async (folder) => {
    if (folder === "/") return;
    if (await isEmpty(folder)) {
      try {
        await adapter.rmdir(folder, true);
        console.info(`Deleted empty folder: ${folder}`);
      } catch (error) {
        if (!(error instanceof Error && error.message.includes("ENOENT"))) {
          console.error(`Failed to delete folder ${folder}:`, error);
        }
      }
    }
  };
  const processFolder = async (folder) => {
    try {
      const contents = await adapter.list(folder);
      if (!contents) return;
      for (const subFolder of contents.folders) {
        const fullSubFolderPath = subFolder.startsWith("/") ? subFolder : `${folder === "/" ? "" : folder}/${subFolder}`;
        await processFolder(fullSubFolderPath);
      }
      await deleteIfEmpty(folder);
    } catch (e) {
      console.warn(`Error processing folder ${folder} for cleanup:`, e);
    }
  };
  console.info("Starting empty folder cleanup...");
  await processFolder(basePath);
  console.info("Folder cleanup complete.");
}
async function ensureFoldersExist(adapter, filePath) {
  const pathSegments = filePath.split("/");
  if (pathSegments.length <= 1) return;
  let currentPath = "";
  for (let i = 0; i < pathSegments.length - 1; i++) {
    currentPath += (i > 0 ? "/" : "") + pathSegments[i];
    if (currentPath === "") continue;
    try {
      if (!await adapter.exists(currentPath)) {
        console.info("Creating folder:", currentPath);
        await adapter.mkdir(currentPath);
      }
    } catch (error) {
      console.error(`Failed to create folder ${currentPath}:`, error);
      throw new Error(`Failed to ensure folder structure for ${filePath}`);
    }
  }
}

// ui/FileVersionsModal.ts
var FileVersionsModal = class extends import_obsidian2.Modal {
  constructor(app, plugin, stableId, displayPath) {
    super(app);
    this.versions = [];
    this.isLoading = true;
    this.plugin = plugin;
    this.stableId = stableId;
    this.displayPath = displayPath;
    this.modalEl.addClass("fast-sync-modal");
    this.modalEl.addClass("fast-sync-file-versions-modal");
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Version History" });
    contentEl.createEl("p", { text: `File: ${this.displayPath}` });
    contentEl.createEl("p", {
      text: `(StableID: ${this.stableId.substring(0, 10)}...)`,
      cls: "setting-item-description"
    });
    this.historyContainer = contentEl.createDiv({
      cls: "fast-sync-history-container"
    });
    this.displayLoading();
    try {
      this.versions = await this.plugin.getFileHistory(this.stableId);
      this.isLoading = false;
      this.displayVersions();
    } catch (error) {
      console.error(`Failed to load history for stableId ${this.stableId.substring(0, 10)} (${this.displayPath}):`, error);
      this.displayError(`Failed to load versions: ${error.message}`);
    }
  }
  displayLoading() {
    this.historyContainer.empty();
    this.historyContainer.createEl("p", { text: "Loading version history..." });
  }
  displayError(errorMessage) {
    this.historyContainer.empty();
    this.historyContainer.createEl("p", {
      text: errorMessage,
      cls: "error-message"
    });
  }
  displayVersions() {
    this.historyContainer.empty();
    if (this.versions.length === 0) {
      this.historyContainer.createEl("p", {
        text: "No history found for this file on the server."
      });
      return;
    }
    this.versions.sort((a, b) => new Date(b.version_time).getTime() - new Date(a.version_time).getTime());
    this.versions.forEach((version, index) => {
      const itemEl = this.historyContainer.createDiv({
        cls: "fast-sync-version-item"
      });
      const headerEl = itemEl.createDiv({ cls: "fast-sync-version-header" });
      const infoEl = headerEl.createDiv({
        cls: "fast-sync-version-header-info"
      });
      const date = new Date(version.version_time);
      infoEl.setText(`Version from ${date.toLocaleString()}`);
      if (index === 0) {
        infoEl.appendText(" (Current Server Version)");
      }
      const buttonContainer = headerEl.createDiv({
        cls: "fast-sync-version-buttons"
      });
      const contentEl = itemEl.createDiv({ cls: "fast-sync-version-content" });
      if (version.isBinary) {
        contentEl.setText("[Binary Content - Cannot be previewed directly]");
      } else if (!version.content) {
        contentEl.setText("[Content seems empty]");
      } else {
        contentEl.setText(version.content);
      }
      let isContentVisible = false;
      const toggleContent = () => {
        isContentVisible = !isContentVisible;
        contentEl.toggleClass("active", isContentVisible);
      };
      headerEl.onClickEvent((ev) => {
        if (!(ev.target instanceof Element && ev.target.closest(".clickable-icon, button"))) {
          toggleContent();
        }
      });
      new import_obsidian2.ButtonComponent(buttonContainer).setButtonText("Restore").setTooltip(`Restore vault file to this version from ${date.toLocaleString()}`).onClick(async (evt) => {
        evt.stopPropagation();
        const button = evt.target;
        button.disabled = true;
        button.setText("Restoring...");
        try {
          await this.restoreVersion(version);
          new import_obsidian2.Notice(`Restored '${this.displayPath}' to version from ${date.toLocaleString()}`);
          this.close();
        } catch (error) {
          console.error("Failed to restore version:", error);
          new import_obsidian2.Notice(`Failed to restore version: ${error.message}`, 5e3);
          button.disabled = false;
          button.setText("Restore");
        }
      });
    });
  }
  async restoreVersion(version) {
    var _a;
    const adapter = this.app.vault.adapter;
    const targetPath = version.filePath;
    console.info(`Attempting to restore to path: ${targetPath}`);
    console.debug(`Restoring version data: mtime=${version.mtime}, isBinary=${version.isBinary}, contentHash=${version.contentHash}`);
    try {
      await ensureFoldersExist(adapter, targetPath);
      const writeOptions = { mtime: version.mtime };
      if (version.isBinary) {
        if (!version.content) throw new Error("Binary content is missing for restore.");
        const buffer = base64ToArrayBuffer(version.content);
        await adapter.writeBinary(targetPath, buffer, writeOptions);
      } else {
        await adapter.write(targetPath, (_a = version.content) != null ? _a : "", writeOptions);
      }
      this.plugin.contentHashCache.set(targetPath, version.contentHash);
      const abstractFile = this.app.vault.getAbstractFileByPath(targetPath);
      if (abstractFile instanceof import_obsidian2.TFile) {
        console.info(`Version of ${targetPath} restored locally. Triggering modify event.`);
        this.app.metadataCache.trigger("changed", abstractFile);
        this.app.vault.trigger("modify", abstractFile);
      } else {
        const newlyCreatedFile = this.app.vault.getAbstractFileByPath(targetPath);
        if (newlyCreatedFile) {
          console.info(`File ${targetPath} created during restore. Triggering create event.`);
          this.app.vault.trigger("create", newlyCreatedFile);
        } else {
          console.warn(`Could not find abstract file for ${targetPath} after restore to trigger events.`);
        }
      }
      console.info(`Next sync will upload the restored version of ${targetPath}.`);
    } catch (error) {
      console.error(`Error during restore operation for ${targetPath}:`, error);
      throw new Error(`Could not write restored file: ${error.message}`);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// ui/FileHistoryModal.ts
var FileHistoryModal = class extends import_obsidian3.FuzzySuggestModal {
  constructor(app, plugin) {
    super(app);
    this.fileItems = [];
    this.isLoading = true;
    this.plugin = plugin;
    this.setPlaceholder("Loading files from server...");
    this.loadFiles();
    this.scope.register([], "Escape", this.close.bind(this));
  }
  async loadFiles() {
    this.isLoading = true;
    this.fileItems = [];
    try {
      const serverFiles = await this.plugin.getAllFilesFromServer();
      const decryptedItems = [];
      for (const entry of serverFiles) {
        const plaintextPath = await this.plugin.tryDecryptPath(entry.currentEncryptedFilePath);
        if (plaintextPath) {
          decryptedItems.push({
            stableId: entry.stableId,
            plaintextPath
          });
        } else {
          console.warn(`Could not decrypt path for stableId ${entry.stableId.substring(0, 10)}...`);
        }
      }
      this.fileItems = decryptedItems.sort((a, b) => a.plaintextPath.localeCompare(b.plaintextPath));
      this.isLoading = false;
      this.setPlaceholder("Select a file to view its history");
    } catch (error) {
      console.error("Failed to load files for history:", error);
      new import_obsidian3.Notice(`Failed to load files: ${error.message}`);
      this.close();
    }
  }
  getItems() {
    return this.fileItems;
  }
  getItemText(item) {
    return item.plaintextPath;
  }
  renderSuggestion(item, el) {
    el.setText(item.item.plaintextPath);
  }
  onOpen() {
    super.onOpen();
    if (!this.isLoading) {
      this.setInstructions([
        { command: "\u2191\u2193", purpose: "to navigate" },
        { command: "\u21B5", purpose: "to select" },
        { command: "esc", purpose: "to dismiss" }
      ]);
    }
    this.inputEl.focus();
  }
  onChooseItem(item, evt) {
    if (this.isLoading) return;
    new FileVersionsModal(this.app, this.plugin, item.stableId, item.plaintextPath).open();
  }
};

// ui/LogViewerModal.ts
var import_obsidian4 = require("obsidian");

// utils/logging.ts
var LogStore = class _LogStore {
  constructor() {
    this.messages = [];
    this.maxMessages = 100;
    this.listeners = /* @__PURE__ */ new Set();
  }
  static getInstance() {
    if (!_LogStore.instance) {
      _LogStore.instance = new _LogStore();
    }
    return _LogStore.instance;
  }
  addMessage(level, message) {
    this.messages.push({
      timestamp: Date.now(),
      level,
      message
    });
    if (this.messages.length > this.maxMessages) {
      this.messages.splice(0, this.messages.length - this.maxMessages);
    }
    this.listeners.forEach((listener) => listener());
  }
  addListener(callback) {
    this.listeners.add(callback);
  }
  removeListener(callback) {
    this.listeners.delete(callback);
  }
  getMessages() {
    return [...this.messages];
  }
  clear() {
    this.messages = [];
    this.listeners.forEach((listener) => listener());
  }
};
function setupConsoleLogCapture(verboseLogging) {
  const logStore = LogStore.getInstance();
  const originalConsole = {
    info: console.info,
    error: console.error,
    debug: console.debug,
    warn: console.warn,
    log: console.log
  };
  console.log = (...args) => {
    if (verboseLogging) {
      logStore.addMessage("info", args.map(String).join(" "));
      originalConsole.log.apply(console, args);
    }
  };
  console.info = (...args) => {
    if (verboseLogging) {
      logStore.addMessage("info", args.map(String).join(" "));
      originalConsole.info.apply(console, args);
    }
  };
  console.warn = (...args) => {
    if (verboseLogging) {
      logStore.addMessage("error", `WARN: ${args.map(String).join(" ")}`);
      originalConsole.warn.apply(console, args);
    }
  };
  console.error = (...args) => {
    logStore.addMessage("error", args.map(String).join(" "));
    originalConsole.error.apply(console, args);
  };
  console.debug = (...args) => {
    if (verboseLogging) {
      logStore.addMessage("debug", args.map(String).join(" "));
      originalConsole.debug.apply(console, args);
    }
  };
  console.info("Console log capture initialized.");
}

// ui/LogViewerModal.ts
var LogViewerModal = class extends import_obsidian4.Modal {
  constructor(app) {
    super(app);
    this.isAutoScrollActive = true;
    this.logStore = LogStore.getInstance();
    this.updateCallback = this.refreshLogs.bind(this);
    this.modalEl.addClass("fast-sync-modal");
    this.modalEl.addClass("fast-sync-log-viewer-modal");
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Fast Sync Log" });
    const controlsContainer = contentEl.createDiv("fast-sync-log-controls");
    const buttonContainer = controlsContainer.createDiv("button-container");
    new import_obsidian4.ButtonComponent(buttonContainer).setButtonText("Clear Logs").setTooltip("Clear all currently displayed logs").onClick(() => {
      this.logStore.clear();
      this.refreshLogs();
    });
    this.autoScrollButton = new import_obsidian4.ButtonComponent(buttonContainer).setButtonText("Auto-Scroll").setTooltip("Toggle automatic scrolling to the latest log entry").setClass("auto-scroll-toggle").onClick(() => {
      this.isAutoScrollActive = !this.isAutoScrollActive;
      this.autoScrollButton.buttonEl.toggleClass("is-active", this.isAutoScrollActive);
      if (this.isAutoScrollActive) {
        this.scrollToBottom();
      }
    });
    this.autoScrollButton.buttonEl.toggleClass("is-active", this.isAutoScrollActive);
    this.logContainer = contentEl.createDiv("fast-sync-log-viewer-container");
    this.refreshLogs();
    this.logStore.addListener(this.updateCallback);
  }
  refreshLogs() {
    if (!this.logContainer || !this.logContainer.isConnected) {
      this.logStore.removeListener(this.updateCallback);
      return;
    }
    const shouldScroll = this.isAutoScrollActive && this.logContainer.scrollHeight - this.logContainer.scrollTop - this.logContainer.clientHeight < 50;
    this.logContainer.empty();
    const logs = this.logStore.getMessages();
    if (logs.length === 0) {
      this.logContainer.createEl("p", {
        text: "Log is empty.",
        cls: "empty-log-message"
      });
      return;
    }
    const fragment = document.createDocumentFragment();
    logs.forEach((log) => {
      const entryEl = fragment.createDiv({ cls: "fast-sync-log-entry" });
      entryEl.createSpan({
        cls: "log-timestamp",
        text: `[${new Date(log.timestamp).toLocaleTimeString()}]`
      });
      entryEl.createSpan({
        cls: `log-level log-level-${log.level.toUpperCase()}`,
        text: `[${log.level.toUpperCase()}]`
      });
      entryEl.createSpan({ cls: "log-message", text: ` ${log.message}` });
    });
    this.logContainer.appendChild(fragment);
    if (shouldScroll) {
      this.scrollToBottom();
    }
  }
  scrollToBottom() {
    requestAnimationFrame(() => {
      if (this.logContainer && this.logContainer.isConnected) {
        this.logContainer.scrollTop = this.logContainer.scrollHeight;
      }
    });
  }
  onClose() {
    this.logStore.removeListener(this.updateCallback);
    const { contentEl } = this;
    contentEl.empty();
  }
};

// utils/hashUtils.ts
var CRC32_TABLE = new Uint32Array(256);
for (let i = 0; i < 256; i++) {
  let c = i;
  for (let j = 0; j < 8; j++) {
    c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
  }
  CRC32_TABLE[i] = c;
}
async function hashFileContentFast(content) {
  let crc = 4294967295;
  const len = content.length;
  const chunks = 1024 * 64;
  for (let start = 0; start < len; start += chunks) {
    const end = Math.min(start + chunks, len);
    for (let i = start; i < end; i++) {
      crc = crc >>> 8 ^ CRC32_TABLE[(crc ^ content.charCodeAt(i)) & 255];
    }
  }
  return ((crc ^ 4294967295) >>> 0).toString(16).padStart(8, "0");
}
async function hashStringSHA256(input) {
  const buffer = new TextEncoder().encode(input);
  const hashBuffer = await crypto.subtle.digest("SHA-256", buffer);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
}
var ContentHashCache = class {
  constructor() {
    this.cache = /* @__PURE__ */ new Map();
  }
  set(path, hash) {
    this.cache.set(path, hash);
  }
  get(path) {
    return this.cache.get(path) || null;
  }
  invalidate(path) {
    this.cache.delete(path);
  }
  clear() {
    this.cache.clear();
  }
};

// main.ts
var SYNC_ICON = `<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/><path d="M21 3v5h-5"/><path d="M3 12a9 9 0 0 1 15-6.74"/><path d="M3 8v5h5"/><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/></svg>`;
var FastSyncPlugin = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.syncPaused = false;
    this.syncing = false;
    this.lastFullRehash = 0;
    this.syncIntervalId = null;
    this.encryptionKey = null;
    this.currentRemoteState = null;
  }
  async onload() {
    console.info("Loading Fast Sync Plugin...");
    await this.loadSettings();
    setupConsoleLogCapture(this.settings.enableVerboseLogging);
    this.contentHashCache = new ContentHashCache();
    this.vaultAdapter = this.app.vault.adapter;
    await this.loadSettings();
    if (!this.settings.vaultId) {
      this.settings.vaultId = this.app.vault.getName();
      await this.saveSettings();
      console.info(`Vault ID initialized to: ${this.settings.vaultId}`);
    }
    if (this.settings.encryptionPassword) {
      try {
        this.encryptionKey = await deriveEncryptionKey(this.settings.encryptionPassword);
        console.info("Encryption key derived successfully.");
      } catch (error) {
        console.error("Failed to initialize encryption on load:", error);
        new import_obsidian5.Notice(`Error initializing encryption: ${error.message}. Sync might fail.`, 1e4);
      }
    }
    this.statusBarItemEl = this.addStatusBarItem();
    this.updateStatusBar();
    (0, import_obsidian5.addIcon)("fast-sync-icon", SYNC_ICON);
    this.addRibbonIcon("fast-sync-icon", "Fast Sync: Sync Now", () => this.requestSync());
    this.addRibbonIcon("history", "Fast Sync: View File History", () => this.openFileHistoryModal());
    if (this.settings.enableVerboseLogging) {
      this.addRibbonIcon("clipboard-list", "Fast Sync: View Logs", () => this.openLogViewerModal());
    }
    this.addSettingTab(new FastSyncSettingTab(this.app, this));
    this.addCommand({
      id: "sync-now",
      name: "Sync Now",
      callback: () => this.requestSync()
    });
    this.addCommand({
      id: "open-file-history-modal",
      name: "Open File History Browser",
      callback: () => this.openFileHistoryModal()
    });
    this.addCommand({
      id: "view-current-file-history",
      name: "View History for Current File",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          if (!checking) {
            this.openFileVersionsModalForPath(activeFile.path);
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "open-sync-log",
      name: "Open Sync Log Viewer",
      checkCallback: (checking) => {
        if (this.settings.enableVerboseLogging) {
          if (!checking) {
            this.openLogViewerModal();
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "toggle-sync-pause",
      name: "Toggle Sync Pause/Resume",
      callback: () => {
        this.syncPaused = !this.syncPaused;
        new import_obsidian5.Notice(this.syncPaused ? "Sync paused" : "Sync resumed");
        this.updateStatusBar();
        if (!this.syncPaused && !this.syncing) {
          this.requestSync();
        }
      }
    });
    this.registerEvent(this.app.vault.on("modify", this.handleFileModify.bind(this)));
    this.registerEvent(this.app.vault.on("delete", this.handleFileDelete.bind(this)));
    this.registerEvent(this.app.vault.on("rename", this.handleFileRename.bind(this)));
    this.rescheduleSync();
    await this.runCleanEmptyFolders();
    setTimeout(() => this.requestSync(), 5e3);
    console.info("Fast Sync Plugin loaded successfully.");
  }
  onunload() {
    console.info("Unloading Fast Sync Plugin...");
    if (this.syncIntervalId !== null) {
      window.clearInterval(this.syncIntervalId);
      this.syncIntervalId = null;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  rescheduleSync() {
    if (this.syncIntervalId !== null) {
      window.clearInterval(this.syncIntervalId);
    }
    if (this.settings.syncInterval > 0) {
      this.syncIntervalId = window.setInterval(() => this.requestSync(), this.settings.syncInterval * 1e3);
      this.registerInterval(this.syncIntervalId);
      console.info(`Sync scheduled every ${this.settings.syncInterval} seconds.`);
    } else {
      console.info("Sync interval is 0, automatic sync disabled.");
      this.syncIntervalId = null;
    }
  }
  async requestSync() {
    if (this.syncPaused) {
      console.info("Sync requested but currently paused.");
      this.updateStatusBar("Sync paused");
      return;
    }
    if (this.syncing) {
      console.info("Sync requested but already in progress.");
      return;
    }
    this.syncing = true;
    this.updateStatusBar("Syncing...");
    try {
      console.info(`Sync started at ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}`);
      const syncStart = performance.now();
      await this.executeSync();
      this.settings.lastSync = Date.now();
      await this.saveSettings();
      const duration = (performance.now() - syncStart) / 1e3;
      console.info(`Sync finished successfully in ${duration.toFixed(2)}s`);
      this.updateStatusBar();
    } catch (error) {
      console.error("Sync failed:", error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      new import_obsidian5.Notice(`Sync failed: ${errorMessage}`, 1e4);
      this.updateStatusBar("Sync failed!");
    } finally {
      this.syncing = false;
      if (this.syncPaused) {
        this.updateStatusBar("Sync paused");
      }
    }
  }
  /** Performs the actual synchronization steps using stableId. */
  async executeSync() {
    if (!this.settings.serverUrl || !this.settings.apiKey) throw new Error("Server URL or API Key is not configured.");
    if (this.settings.encryptionPassword && !this.encryptionKey) throw new Error("Encryption is enabled, but the key is not initialized.");
    const now = Date.now();
    if (now - this.lastFullRehash > this.settings.fullRehashInterval * 60 * 1e3) {
      console.info("Performing periodic full rehash...");
      this.contentHashCache.clear();
      this.lastFullRehash = now;
      await this.runCleanEmptyFolders();
    }
    const apiOptions = {
      settings: this.settings,
      encryptionKey: this.encryptionKey
    };
    if (this.settings.deletionQueue.length > 0) {
      await this.processDeletions(apiOptions);
    }
    console.info("Downloading remote state...");
    this.currentRemoteState = await downloadRemoteState(apiOptions);
    const remoteStateMap = this.currentRemoteState.state;
    const remoteStableIds = Object.keys(remoteStateMap);
    console.info(`Found ${remoteStableIds.length} stable IDs in remote state.`);
    console.info("Scanning local files...");
    const localFilePaths = await getAllUserFiles(this.app.vault);
    if (this.settings.syncPlugins) {
      const pluginFiles = await getPluginFiles(this.app.vault);
      console.info(`Including ${pluginFiles.length} plugin files.`);
      localFilePaths.push(...pluginFiles);
    }
    console.info(`Found ${localFilePaths.length} local files to consider.`);
    console.info("Comparing local and remote states using stableId...");
    const comparisonStart = performance.now();
    const uploadEntries = [];
    const filesToDownloadStableIds = /* @__PURE__ */ new Set();
    const processedLocalPaths = /* @__PURE__ */ new Set();
    const maxFileSizeBytes = this.settings.maxFileSizeMB * 1024 * 1024;
    for (const localPath of localFilePaths) {
      processedLocalPaths.add(localPath);
      try {
        const stat = await this.vaultAdapter.stat(localPath);
        if (!stat) continue;
        if (stat.size > maxFileSizeBytes) {
          console.debug(`Skipping large file: ${localPath}`);
          continue;
        }
        const stableId = await hashStringSHA256(localPath);
        let localContentHash = this.contentHashCache.get(localPath);
        let fileContentData = null;
        if (!localContentHash) {
          fileContentData = await getFileContent(this.vaultAdapter, localPath);
          localContentHash = await hashFileContentFast(fileContentData.content);
          this.contentHashCache.set(localPath, localContentHash);
        }
        const remoteMeta = remoteStateMap[stableId];
        const localMtime = stat.mtime;
        if (!remoteMeta) {
          console.debug(`[UPLOAD] New local file (StableID: ${stableId.substring(0, 10)}): ${localPath}`);
          if (!fileContentData) fileContentData = await getFileContent(this.vaultAdapter, localPath);
          uploadEntries.push(
            await this.prepareUploadEntry(localPath, stableId, fileContentData, localContentHash, localMtime, false, apiOptions)
          );
        } else if (remoteMeta.deleted) {
          if (localMtime > remoteMeta.currentMtime) {
            console.warn(
              `[UPLOAD/UNDELETE] Local file '${localPath}' (StableID: ${stableId.substring(0, 10)}) modified after server deletion. Uploading.`
            );
            if (!fileContentData) fileContentData = await getFileContent(this.vaultAdapter, localPath);
            uploadEntries.push(
              await this.prepareUploadEntry(localPath, stableId, fileContentData, localContentHash, localMtime, false, apiOptions)
            );
          } else {
            console.warn(
              `[DELETE LOCAL] Server marked '${localPath}' (StableID: ${stableId.substring(0, 10)}) as deleted more recently. Will delete local file.`
            );
          }
        } else if (remoteMeta.currentContentHash !== localContentHash) {
          console.debug(`[DIFF] Hash mismatch for ${localPath} (StableID: ${stableId.substring(0, 10)})`);
          if (localMtime > remoteMeta.currentMtime) {
            console.debug(`[UPLOAD] Local file newer: ${localPath}`);
            if (!fileContentData) fileContentData = await getFileContent(this.vaultAdapter, localPath);
            uploadEntries.push(
              await this.prepareUploadEntry(localPath, stableId, fileContentData, localContentHash, localMtime, false, apiOptions)
            );
          } else if (localMtime < remoteMeta.currentMtime) {
            console.debug(`[DOWNLOAD] Remote file newer: ${localPath}`);
            filesToDownloadStableIds.add(stableId);
          } else {
            console.warn(`[CONFLICT/UPLOAD] Hash mismatch, same mtime for ${localPath}. Uploading local.`);
            if (!fileContentData) fileContentData = await getFileContent(this.vaultAdapter, localPath);
            uploadEntries.push(
              await this.prepareUploadEntry(localPath, stableId, fileContentData, localContentHash, localMtime, false, apiOptions)
            );
          }
        }
      } catch (error) {
        console.error(`Error processing local file ${localPath} during comparison:`, error);
      }
    }
    for (const remoteStableId of remoteStableIds) {
      const remoteMeta = remoteStateMap[remoteStableId];
      let potentialLocalPath = null;
      if (this.settings.encryptionPassword && this.encryptionKey && remoteMeta.currentEncryptedFilePath) {
        try {
          potentialLocalPath = await decryptText(remoteMeta.currentEncryptedFilePath, this.encryptionKey);
        } catch (e) {
        }
      } else if (!this.settings.encryptionPassword) {
        potentialLocalPath = remoteMeta.currentEncryptedFilePath;
      }
      if (potentialLocalPath && !processedLocalPaths.has(potentialLocalPath) && !remoteMeta.deleted) {
        const isPluginFile = potentialLocalPath.startsWith(this.app.vault.configDir + "/plugins/");
        if (!this.settings.syncPlugins && isPluginFile) {
          console.debug(`[SKIP DOWNLOAD] Plugin file ${potentialLocalPath} (StableID: ${remoteStableId.substring(0, 10)}) skipped.`);
          continue;
        }
        console.debug(`[DOWNLOAD] New remote file (StableID: ${remoteStableId.substring(0, 10)}): ${potentialLocalPath}`);
        filesToDownloadStableIds.add(remoteStableId);
      }
    }
    console.info(
      `Comparison complete in ${(performance.now() - comparisonStart).toFixed(2)}ms. Uploads: ${uploadEntries.length}, Downloads: ${filesToDownloadStableIds.size}`
    );
    if (uploadEntries.length > 0) {
      console.info(`Starting upload of ${uploadEntries.length} entries...`);
      await this.processFileUploads(uploadEntries, apiOptions);
    } else {
      console.info("No files to upload.");
    }
    if (filesToDownloadStableIds.size > 0) {
      console.info(`Starting download for ${filesToDownloadStableIds.size} stable IDs...`);
      await this.processFileDownloads([...filesToDownloadStableIds], apiOptions);
    } else {
      console.info("No files to download.");
    }
    this.currentRemoteState = null;
  }
  /** Helper to prepare a single entry for the upload payload. */
  async prepareUploadEntry(plaintextPath, stableId, fileData, contentHash, mtime, deleted, apiOptions) {
    let finalPath = plaintextPath;
    let finalContent = fileData.content;
    if (apiOptions.settings.encryptionPassword && apiOptions.encryptionKey) {
      finalPath = await encryptText(plaintextPath, apiOptions.encryptionKey);
      finalContent = deleted ? "" : await encryptText(fileData.content, apiOptions.encryptionKey);
    } else if (deleted) {
      finalContent = "";
    }
    return {
      stableId,
      filePath: finalPath,
      content: finalContent,
      mtime,
      contentHash,
      isBinary: fileData.isBinary,
      deleted
    };
  }
  /** Processes the queue of locally deleted files by notifying the server. */
  async processDeletions(apiOptions) {
    const deletionsStart = performance.now();
    const deletionEntries = [];
    const pathsToDelete = [...this.settings.deletionQueue];
    console.info(`Processing ${pathsToDelete.length} local deletions...`);
    for (const plaintextPath of pathsToDelete) {
      try {
        const stableId = await hashStringSHA256(plaintextPath);
        const deletionEntry = await this.prepareUploadEntry(
          plaintextPath,
          stableId,
          { content: "", isBinary: false },
          "",
          Date.now(),
          true,
          apiOptions
        );
        deletionEntries.push(deletionEntry);
      } catch (error) {
        console.error(`Error preparing deletion entry for ${plaintextPath}:`, error);
      }
    }
    if (deletionEntries.length === 0) {
      console.info("No valid deletion entries prepared.");
      this.settings.deletionQueue = [];
      await this.saveSettings();
      return;
    }
    try {
      await uploadFileChanges(deletionEntries, apiOptions);
      this.settings.deletionQueue = [];
      await this.saveSettings();
      console.info(`Deletions processed successfully in ${(performance.now() - deletionsStart).toFixed(2)}ms`);
    } catch (error) {
      console.error("Failed to process deletions:", error);
      throw new Error(`Failed to inform server about deletions: ${error.message}`);
    }
  }
  /** Sends prepared upload entries in chunks. */
  async processFileUploads(uploadEntries, apiOptions) {
    console.info(`Uploading ${uploadEntries.length} prepared entries...`);
    const uploadStart = performance.now();
    let chunk = [];
    let currentChunkSize = 0;
    for (let i = 0; i < uploadEntries.length; i++) {
      const entry = uploadEntries[i];
      chunk.push(entry);
      currentChunkSize += entry.content.length;
      if (currentChunkSize >= UPLOAD_CHUNK_SIZE_BYTES || i === uploadEntries.length - 1) {
        console.info(
          `Uploading chunk ${Math.ceil((i + 1) / chunk.length)}: ${chunk.length} entries (${(currentChunkSize / (1024 * 1024)).toFixed(2)} MB estimated)...`
        );
        try {
          await uploadFileChanges(chunk, apiOptions);
        } catch (error) {
          console.error(`Failed to upload chunk: ${error}`);
          throw new Error(`Failed to upload chunk: ${error.message}`);
        }
        chunk = [];
        currentChunkSize = 0;
      }
    }
    console.info(`File uploads completed in ${(performance.now() - uploadStart).toFixed(2)}ms`);
  }
  /** Downloads file content for specified stable IDs in chunks and saves them locally. */
  async processFileDownloads(stableIdsToDownload, apiOptions) {
    console.info(`Requesting downloads for ${stableIdsToDownload.length} stable IDs...`);
    const downloadStart = performance.now();
    if (!this.currentRemoteState) {
      console.error("Cannot process downloads: Remote state is missing.");
      throw new Error("Internal error: Remote state not available for download process.");
    }
    const remoteStateMap = this.currentRemoteState.state;
    const encryptedPathsToRequest = [];
    for (const stableId of stableIdsToDownload) {
      const remoteMeta = remoteStateMap[stableId];
      if (remoteMeta && !remoteMeta.deleted) {
        encryptedPathsToRequest.push(remoteMeta.currentEncryptedFilePath);
      } else {
        console.warn(`Skipping download for stableId ${stableId.substring(0, 10)}: Not found in remote state or marked deleted.`);
      }
    }
    if (encryptedPathsToRequest.length === 0) {
      console.info("No valid encrypted paths found to request download.");
      return;
    }
    console.info(`Requesting content for ${encryptedPathsToRequest.length} encrypted file paths...`);
    for (let i = 0; i < encryptedPathsToRequest.length; i += DOWNLOAD_CHUNK_FILE_COUNT) {
      const chunkPaths = encryptedPathsToRequest.slice(i, i + DOWNLOAD_CHUNK_FILE_COUNT);
      console.info(
        `Requesting download chunk ${Math.floor(i / DOWNLOAD_CHUNK_FILE_COUNT) + 1}: ${chunkPaths.length} paths (starting with ${chunkPaths[0].substring(0, 20)}...).`
      );
      try {
        const downloadedFilesData = await downloadFilesContent(chunkPaths, apiOptions);
        if (downloadedFilesData.length === 0 && chunkPaths.length > 0) {
          console.warn(`Server returned no content for requested chunk starting with ${chunkPaths[0].substring(0, 20)}.`);
          continue;
        }
        console.info(`Processing downloaded chunk of ${downloadedFilesData.length} files...`);
        for (const fileData of downloadedFilesData) {
          await this.saveDownloadedFile(fileData, apiOptions);
        }
      } catch (error) {
        console.error(`Error downloading or processing chunk starting with ${chunkPaths[0].substring(0, 20)}:`, error);
        new import_obsidian5.Notice(`Error downloading files: ${error.message}. Check logs.`, 8e3);
      }
    }
    console.info(`File downloads completed in ${(performance.now() - downloadStart).toFixed(2)}ms`);
  }
  /** Saves a single downloaded file (with encrypted path/content) to the local vault. */
  async saveDownloadedFile(fileData, apiOptions) {
    let plaintextPath = null;
    try {
      if (apiOptions.settings.encryptionPassword && apiOptions.encryptionKey) {
        plaintextPath = await decryptText(fileData.encryptedFilePath, apiOptions.encryptionKey);
      } else if (!apiOptions.settings.encryptionPassword) {
        plaintextPath = fileData.encryptedFilePath;
      } else {
        throw new Error("Encryption key missing while trying to decrypt downloaded file path.");
      }
      if (!plaintextPath) {
        throw new Error(`Failed to determine plaintext path for encrypted path ${fileData.encryptedFilePath.substring(0, 20)}...`);
      }
      console.debug(`Saving downloaded file: ${plaintextPath} (mtime: ${new Date(fileData.mtime).toISOString()})`);
      await ensureFoldersExist(this.vaultAdapter, plaintextPath);
      let finalContent;
      if (apiOptions.settings.encryptionPassword && apiOptions.encryptionKey) {
        const decryptedBase64OrText = await decryptText(fileData.encryptedContent, apiOptions.encryptionKey);
        if (fileData.isBinary) {
          finalContent = base64ToArrayBuffer(decryptedBase64OrText);
        } else {
          finalContent = decryptedBase64OrText;
        }
      } else if (!apiOptions.settings.encryptionPassword) {
        if (fileData.isBinary) {
          finalContent = base64ToArrayBuffer(fileData.encryptedContent);
        } else {
          finalContent = fileData.encryptedContent;
        }
      } else {
        throw new Error("Encryption key missing while trying to decrypt downloaded file content.");
      }
      const writeOptions = { mtime: fileData.mtime };
      if (fileData.isBinary && finalContent instanceof ArrayBuffer) {
        await this.vaultAdapter.writeBinary(plaintextPath, finalContent, writeOptions);
      } else if (!fileData.isBinary && typeof finalContent === "string") {
        await this.vaultAdapter.write(plaintextPath, finalContent, writeOptions);
      } else {
        throw new Error(`Type mismatch during save: isBinary=${fileData.isBinary}, content type=${typeof finalContent}`);
      }
      this.contentHashCache.set(plaintextPath, fileData.contentHash);
    } catch (error) {
      const pathIdentifier = plaintextPath || `encrypted:${fileData.encryptedFilePath.substring(0, 20)}`;
      console.error(`Error saving downloaded file ${pathIdentifier}:`, error);
      new import_obsidian5.Notice(`Failed to save downloaded file: ${pathIdentifier}. Check logs.`, 5e3);
    }
  }
  handleFileModify(file) {
    if (!(file instanceof import_obsidian5.TFile)) return;
    console.debug(`File modified: ${file.path}, invalidating content cache.`);
    this.contentHashCache.invalidate(file.path);
  }
  async handleFileDelete(file) {
    if (!(file instanceof import_obsidian5.TFile)) return;
    console.info(`File deleted locally: ${file.path}, adding to deletion queue.`);
    this.contentHashCache.invalidate(file.path);
    if (!this.settings.deletionQueue.includes(file.path)) {
      this.settings.deletionQueue.push(file.path);
      await this.saveSettings();
      setTimeout(() => this.requestSync(), 3e3);
    }
  }
  async handleFileRename(file, oldPath) {
    if (!(file instanceof import_obsidian5.TFile)) return;
    console.info(`File renamed: ${oldPath} -> ${file.path}`);
    this.contentHashCache.invalidate(oldPath);
    this.contentHashCache.invalidate(file.path);
    if (!this.settings.deletionQueue.includes(oldPath)) {
      this.settings.deletionQueue.push(oldPath);
      await this.saveSettings();
    }
    setTimeout(() => this.requestSync(), 3e3);
  }
  /**
   * Force Push: Resets server state, then calculates stable IDs and uploads all local files.
   */
  async forcePushStateToServer() {
    if (this.syncing) {
      new import_obsidian5.Notice("Sync already in progress...");
      return;
    }
    if (this.syncPaused) {
      new import_obsidian5.Notice("Sync is paused...");
      return;
    }
    if (this.settings.encryptionPassword && !this.encryptionKey) {
      new import_obsidian5.Notice("Encryption key not initialized.", 1e4);
      return;
    }
    console.warn("Starting FORCE PUSH operation!");
    new import_obsidian5.Notice("Starting Force Push...");
    this.syncing = true;
    this.updateStatusBar("Force Pushing...");
    const apiOptions = {
      settings: this.settings,
      encryptionKey: this.encryptionKey
    };
    try {
      console.info("Step 1: Resetting server state...");
      await resetServerStateForForcePush(apiOptions);
      console.info("Server state reset successfully.");
      console.info("Step 2: Clearing local deletion queue and cache...");
      this.settings.deletionQueue = [];
      this.contentHashCache.clear();
      this.lastFullRehash = Date.now();
      console.info("Step 3: Scanning all local files for push...");
      const localFilePaths = await getAllUserFiles(this.app.vault);
      if (this.settings.syncPlugins) {
        const pluginFiles = await getPluginFiles(this.app.vault);
        localFilePaths.push(...pluginFiles);
      }
      console.info(`Found ${localFilePaths.length} local files to force push.`);
      console.info("Step 4: Preparing upload entries...");
      const uploadEntries = [];
      const maxFileSizeBytes = this.settings.maxFileSizeMB * 1024 * 1024;
      for (const localPath of localFilePaths) {
        try {
          const stat = await this.vaultAdapter.stat(localPath);
          if (!stat || stat.size > maxFileSizeBytes) continue;
          const stableId = await hashStringSHA256(localPath);
          const fileData = await getFileContent(this.vaultAdapter, localPath);
          const contentHash = await hashFileContentFast(fileData.content);
          this.contentHashCache.set(localPath, contentHash);
          uploadEntries.push(await this.prepareUploadEntry(localPath, stableId, fileData, contentHash, stat.mtime, false, apiOptions));
        } catch (error) {
          console.error(`Error preparing file ${localPath} for force push:`, error);
          new import_obsidian5.Notice(`Skipping ${localPath} during force push due to error.`, 3e3);
        }
      }
      console.info("Step 5: Uploading all local files...");
      if (uploadEntries.length > 0) {
        await this.processFileUploads(uploadEntries, apiOptions);
      } else {
        console.warn("No valid local files found to upload during force push.");
      }
      console.warn("FORCE PUSH complete.");
      new import_obsidian5.Notice("Force Push complete. Server state overwritten.");
      this.settings.lastSync = Date.now();
      await this.saveSettings();
      this.updateStatusBar();
    } catch (error) {
      console.error("FORCE PUSH failed:", error);
      new import_obsidian5.Notice(`Force Push failed: ${error.message}`, 1e4);
      this.updateStatusBar("Sync failed!");
    } finally {
      this.syncing = false;
      if (this.syncPaused) this.updateStatusBar("Sync paused");
      else this.updateStatusBar();
    }
  }
  /**
   * Force Pull: Fetches remote state, deletes local files not matching, downloads required files.
   */
  async forcePullStateFromServer() {
    if (this.syncing) {
      new import_obsidian5.Notice("Sync already in progress...");
      return;
    }
    if (this.syncPaused) {
      new import_obsidian5.Notice("Sync is paused...");
      return;
    }
    if (this.settings.encryptionPassword && !this.encryptionKey) {
      new import_obsidian5.Notice("Encryption key not initialized.", 1e4);
      return;
    }
    console.warn("Starting FORCE PULL operation!");
    new import_obsidian5.Notice("Starting Force Pull...");
    this.syncing = true;
    this.updateStatusBar("Force Pulling...");
    const apiOptions = {
      settings: this.settings,
      encryptionKey: this.encryptionKey
    };
    try {
      console.info("Step 1: Clearing local deletion queue and cache...");
      this.settings.deletionQueue = [];
      this.contentHashCache.clear();
      this.lastFullRehash = 0;
      console.info("Step 2: Fetching remote state...");
      const remoteState = await downloadRemoteState(apiOptions);
      const remoteStateMap = remoteState.state;
      const remoteStableIds = Object.keys(remoteStateMap);
      console.info(`Found ${remoteStableIds.length} stable IDs in remote state.`);
      const stableIdsToDownload = [];
      const remoteFilesMap = /* @__PURE__ */ new Map();
      for (const stableId of remoteStableIds) {
        const meta = remoteStateMap[stableId];
        if (!meta || meta.deleted) continue;
        let plaintextPath = null;
        try {
          if (this.settings.encryptionPassword && this.encryptionKey) {
            plaintextPath = await decryptText(meta.currentEncryptedFilePath, this.encryptionKey);
          } else if (!this.settings.encryptionPassword) {
            plaintextPath = meta.currentEncryptedFilePath;
          } else continue;
          remoteFilesMap.set(stableId, { meta, plaintextPath });
          const isPluginFile = plaintextPath.startsWith(this.app.vault.configDir + "/plugins/");
          if (!this.settings.syncPlugins && isPluginFile) {
            console.debug(`Force Pull: Skipping plugin file ${plaintextPath}`);
            continue;
          }
          stableIdsToDownload.push(stableId);
        } catch (e) {
          console.error(
            `Force Pull: Failed to decrypt path for stableId ${stableId.substring(0, 10)}... Skipping download. Error: ${e.message}`
          );
          new import_obsidian5.Notice(`Failed to decrypt path for a remote file. Skipping download. Check logs/password.`);
        }
      }
      console.info(`Identified ${stableIdsToDownload.length} files to potentially download.`);
      console.info("Step 4: Scanning local files for deletion comparison...");
      const localFilePaths = await getAllUserFiles(this.app.vault);
      if (this.settings.syncPlugins) {
        const pluginFiles = await getPluginFiles(this.app.vault);
        localFilePaths.push(...pluginFiles);
      }
      const localFilesToDelete = [];
      for (const localPath of localFilePaths) {
        try {
          const stableId = await hashStringSHA256(localPath);
          const remoteEntry = remoteFilesMap.get(stableId);
          if (!remoteEntry || remoteEntry.meta.deleted || remoteEntry.plaintextPath !== localPath) {
            localFilesToDelete.push(localPath);
          }
        } catch (hashError) {
          console.error(`Failed to hash local path ${localPath} during force pull deletion check: ${hashError}`);
        }
      }
      console.info(`Identified ${localFilesToDelete.length} local files for deletion.`);
      console.info("Step 5: Deleting local files not present or deleted on server...");
      let deletionErrors = 0;
      for (const filePath of localFilesToDelete) {
        try {
          if (await this.vaultAdapter.exists(filePath)) {
            console.debug(`Deleting local file: ${filePath}`);
            await this.vaultAdapter.remove(filePath);
          }
          this.contentHashCache.invalidate(filePath);
        } catch (error) {
          console.error(`Failed to delete local file ${filePath}:`, error);
          deletionErrors++;
        }
      }
      if (deletionErrors > 0) {
        new import_obsidian5.Notice(`Force Pull: Failed to delete ${deletionErrors} local files. Check logs.`, 5e3);
      }
      await this.runCleanEmptyFolders();
      console.info("Step 6: Downloading files from server...");
      if (stableIdsToDownload.length > 0) {
        await this.processFileDownloads(stableIdsToDownload, apiOptions);
      } else {
        console.info("No files to download from server.");
      }
      console.warn("FORCE PULL complete.");
      new import_obsidian5.Notice("Force Pull complete. Local state overwritten.");
      this.settings.lastSync = Date.now();
      await this.saveSettings();
      this.updateStatusBar();
    } catch (error) {
      console.error("FORCE PULL failed:", error);
      new import_obsidian5.Notice(`Force Pull failed: ${error.message}`, 1e4);
      this.updateStatusBar("Sync failed!");
    } finally {
      this.syncing = false;
      if (this.syncPaused) this.updateStatusBar("Sync paused");
      else this.updateStatusBar();
    }
  }
  /** Runs the empty folder cleanup utility. */
  async runCleanEmptyFolders() {
    try {
      await cleanEmptyFolders(this.vaultAdapter, "/");
    } catch (error) {
      console.error("Error during empty folder cleanup:", error);
    }
  }
  updateStatusBar(text) {
    if (!this.statusBarItemEl) return;
    let statusText = "";
    if (text) {
      statusText = text;
    } else if (this.syncPaused) {
      statusText = "Sync paused";
    } else {
      const lastSyncTime = this.settings.lastSync ? new Date(this.settings.lastSync).toLocaleTimeString("de") : "Never";
      statusText = `Last sync ${lastSyncTime}`;
    }
    this.statusBarItemEl.setText(statusText);
  }
  openFileHistoryModal() {
    if (!this.settings.serverUrl || !this.settings.apiKey) {
      new import_obsidian5.Notice("Please configure Server URL and API Key.");
      return;
    }
    if (this.settings.encryptionPassword && !this.encryptionKey) {
      new import_obsidian5.Notice("Encryption key not initialized.", 5e3);
      return;
    }
    new FileHistoryModal(this.app, this).open();
  }
  openLogViewerModal() {
    if (!this.settings.enableVerboseLogging) {
      new import_obsidian5.Notice("Log viewer is disabled. Enable verbose logging in settings.");
      return;
    }
    new LogViewerModal(this.app).open();
  }
  /** Helper to open FileVersionsModal using stableId calculated from path */
  async openFileVersionsModalForPath(plaintextPath) {
    if (!this.settings.serverUrl || !this.settings.apiKey) {
      new import_obsidian5.Notice("Please configure Server URL and API Key.");
      return;
    }
    if (this.settings.encryptionPassword && !this.encryptionKey) {
      new import_obsidian5.Notice("Encryption key not initialized.", 5e3);
      return;
    }
    try {
      const stableId = await hashStringSHA256(plaintextPath);
      console.debug(`Opening history for path: ${plaintextPath}, stableId: ${stableId.substring(0, 10)}...`);
      new FileVersionsModal(this.app, this, stableId, plaintextPath).open();
    } catch (error) {
      console.error(`Could not calculate stableId for ${plaintextPath}:`, error);
      new import_obsidian5.Notice(`Could not open history for ${plaintextPath}.`);
    }
  }
  /** Provides access to the getFileHistory API call using stableId. */
  async getFileHistory(stableId) {
    const apiOptions = {
      settings: this.settings,
      encryptionKey: this.encryptionKey
    };
    return getFileHistoryFromServer(stableId, apiOptions);
  }
  /** Provides access to the getAllServerFilesList API call. Caller needs to decrypt paths. */
  async getAllFilesFromServer() {
    const apiOptions = {
      settings: this.settings,
      encryptionKey: this.encryptionKey
    };
    return getAllServerFilesList(apiOptions);
  }
  /** Decrypts a file path if encryption is enabled */
  async tryDecryptPath(encryptedPath) {
    if (this.settings.encryptionPassword && this.encryptionKey) {
      try {
        return await decryptText(encryptedPath, this.encryptionKey);
      } catch (e) {
        console.warn(`Failed to decrypt path ${encryptedPath.substring(0, 20)}... : ${e.message}`);
        return null;
      }
    }
    return encryptedPath;
  }
  /** Handles changes to the encryption password from the settings tab */
  async handleEncryptionPasswordChange(oldPassword, newPassword) {
    console.info("Encryption password setting changed.");
    this.encryptionKey = null;
    if (newPassword) {
      console.info("Attempting to derive new encryption key...");
      try {
        this.encryptionKey = await deriveEncryptionKey(newPassword);
        console.info("New encryption key derived successfully.");
        new import_obsidian5.Notice("Encryption key updated. A Force Push/Pull may be required.", 15e3);
      } catch (error) {
        console.error("Failed to derive new encryption key:", error);
        this.encryptionKey = null;
        throw new Error(`Failed to initialize encryption with new password: ${error.message}`);
      }
    } else {
      console.info("Encryption disabled.");
      new import_obsidian5.Notice("Encryption disabled. A Force Push/Pull may be required.", 15e3);
    }
    this.contentHashCache.clear();
  }
};
//# sourceMappingURL=data:application/json;base64,
