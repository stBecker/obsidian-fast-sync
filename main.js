/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  FileHistoryModal: () => FileHistoryModal,
  FileVersionsModal: () => FileVersionsModal,
  default: () => SimpleSyncPlugin,
  getAllFiles: () => getAllFiles,
  hashFile: () => hashFile,
  isImageFile: () => isImageFile
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var FileHistoryModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app, plugin) {
    super(app);
    this.files = [];
    this.plugin = plugin;
    this.setPlaceholder("Select a file to view history");
    this.loadFiles();
  }
  async loadFiles() {
    try {
      this.files = await this.plugin.getAllFilesFromServer();
      this.setInstructions([
        { command: "\u2191\u2193", purpose: "to navigate" },
        { command: "\u21B5", purpose: "to select" },
        { command: "esc", purpose: "to dismiss" }
      ]);
    } catch (error) {
      new import_obsidian.Notice("Failed to load files: " + error);
      this.close();
    }
  }
  getItems() {
    return this.files;
  }
  getItemText(item) {
    return item;
  }
  onChooseItem(item, evt) {
    new FileVersionsModal(this.app, this.plugin, item).open();
  }
};
var FileVersionsModal = class extends import_obsidian.Modal {
  constructor(app, plugin, fileId) {
    super(app);
    this.versions = [];
    this.plugin = plugin;
    this.fileId = fileId;
  }
  async onOpen() {
    const { contentEl } = this;
    this.contentEl = contentEl;
    contentEl.createEl("h2", { text: "Version History" });
    contentEl.createEl("p", { text: `File: ${this.fileId}` });
    const loadingEl = contentEl.createEl("p", { text: "Loading versions..." });
    try {
      this.versions = await this.plugin.getFileHistory(this.fileId);
      loadingEl.remove();
      this.displayVersions();
    } catch (error) {
      loadingEl.setText("Failed to load versions: " + error);
    }
  }
  displayVersions() {
    if (this.versions.length === 0) {
      this.contentEl.createEl("p", { text: "No history found for this file." });
      return;
    }
    const container = this.contentEl.createDiv({ cls: "history-container" });
    container.createEl("style", {
      text: `
                .history-container {
                    max-height: 400px;
                    overflow-y: auto;
                }
                .version-item {
                    border-bottom: 1px solid var(--background-modifier-border);
                    padding: 10px 0;
                    margin-bottom: 10px;
                }
                .version-header {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 5px;
                }
                .version-content {
                    border: 1px solid var(--background-modifier-border);
                    padding: 10px;
                    margin-top: 10px;
                    max-height: 200px;
                    overflow-y: auto;
                    display: none;
                }
                .version-content.active {
                    display: block;
                }
            `
    });
    this.versions.forEach((version, index) => {
      const item = container.createDiv({ cls: "version-item" });
      const header = item.createDiv({ cls: "version-header" });
      const date = new Date(version.version_time);
      header.createEl("div", {
        text: `Version ${index + 1} - ${date.toLocaleString()}`
      });
      const buttonRow = header.createDiv();
      const toggleBtn = new import_obsidian.ButtonComponent(buttonRow).setButtonText("View").onClick(() => {
        const content2 = item.querySelector(".version-content");
        if (content2) {
          content2.classList.toggle("active");
        }
        toggleBtn.setButtonText(
          (content2 == null ? void 0 : content2.classList.contains("active")) ? "Hide" : "View"
        );
      });
      if (index > 0) {
        new import_obsidian.ButtonComponent(buttonRow).setButtonText("Restore").onClick(async () => {
          try {
            await this.restoreVersion(version);
            new import_obsidian.Notice("Version restored successfully");
            this.close();
          } catch (error) {
            new import_obsidian.Notice("Failed to restore version: " + error);
          }
        });
      }
      const content = item.createDiv({ cls: "version-content" });
      content.createEl("pre", { text: version.content });
    });
  }
  async restoreVersion(version) {
    const file = this.app.vault.getFileByPath(this.fileId);
    if (file) {
      await this.app.vault.modify(file, version.content);
    } else {
      const path = this.fileId.split("/");
      const fileName = path.pop();
      let folderPath = "";
      for (const folder of path) {
        folderPath += folder;
        const exists = this.app.vault.getAbstractFileByPath(folderPath);
        if (!exists) {
          await this.app.vault.createFolder(folderPath);
        }
        folderPath += "/";
      }
      await this.app.vault.create(this.fileId, version.content);
    }
    await this.plugin.sync();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
async function hashFile(file) {
  const content = await file.vault.read(file);
  const msgBuffer = new TextEncoder().encode(content);
  const hashBuffer = await crypto.subtle.digest("SHA-256", msgBuffer);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
}
async function getAllFiles(vault) {
  return vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian.TFile && (file.extension === "md" || isImageFile(file.extension)));
}
function isImageFile(extension) {
  return ["png", "jpg", "jpeg", "gif", "svg"].includes(extension.toLowerCase());
}
var DEFAULT_SETTINGS = {
  serverUrl: "",
  apiKey: "",
  syncInterval: 60,
  // in seconds
  lastSync: 0,
  deletionQueue: [],
  vaultId: "",
  fullRehashInterval: 15
  // 15 minutes default
};
var HashCache = class {
  constructor() {
    this.cache = /* @__PURE__ */ new Map();
    this.CACHE_LIFETIME = 36e5;
  }
  // 1 hour in milliseconds
  set(path, hash) {
    this.cache.set(path, {
      hash,
      timestamp: Date.now()
    });
  }
  get(path) {
    const entry = this.cache.get(path);
    if (!entry)
      return null;
    if (Date.now() - entry.timestamp > this.CACHE_LIFETIME) {
      this.cache.delete(path);
      return null;
    }
    return entry.hash;
  }
  invalidate(path) {
    this.cache.delete(path);
  }
  clear() {
    this.cache.clear();
  }
};
var SimpleSyncPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.syncPaused = false;
    this.lastFullRehash = 0;
    this.syncing = false;
  }
  async onload() {
    this.hashCache = new HashCache();
    await this.loadSettings();
    if (!this.settings.vaultId) {
      this.settings.vaultId = this.app.vault.getName();
      await this.saveSettings();
    }
    this.statusBarItemEl = this.addStatusBarItem();
    this.statusBarItemEl.setText("Last sync: Never");
    this.addSettingTab(new SimpleSyncSettingTab(this.app, this));
    this.registerEvent(this.app.vault.on("delete", this.handleFileDeletion.bind(this)));
    this.registerEvent(this.app.vault.on("rename", this.handleFileRename.bind(this)));
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (file instanceof import_obsidian.TFile) {
          this.hashCache.invalidate(file.path);
        }
      })
    );
    this.registerInterval(window.setInterval(() => this.sync(), this.settings.syncInterval * 1e3));
    this.addRibbonIcon("clock", "View File History", () => {
      new FileHistoryModal(this.app, this).open();
    });
    this.addCommand({
      id: "open-file-history-modal",
      name: "Open File History Browser",
      callback: () => {
        new FileHistoryModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "view-current-file-history",
      name: "View History for Current File",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          if (!checking) {
            new FileVersionsModal(this.app, this, activeFile.path).open();
          }
          return true;
        }
        return false;
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async resync() {
    console.info("Starting resync...");
    console.info("Fetching remote state...");
    const remoteState = await this.downloadState();
    const remoteFiles = Object.keys(remoteState);
    console.info(`Found ${remoteFiles.length} files on remote`);
    console.info("Getting local files...");
    const localFiles = await getAllFiles(this.app.vault);
    console.info(`Found ${localFiles.length} files locally`);
    const remoteOnly = remoteFiles.filter((file) => !localFiles.map((file2) => file2.path).includes(file));
    console.info(`Found ${remoteOnly.length} files to delete from remote`);
    for (const fileId of remoteOnly) {
      console.debug(`Marking ${fileId} for deletion`);
      this.settings.deletionQueue.push(fileId);
    }
    await this.saveSettings();
    console.info("Preparing to upload all local files...");
    const uploads = [];
    for (const file of localFiles) {
      console.debug(`Processing ${file.path}`);
      const hash = await hashFile(file);
      uploads.push({
        fileId: file.path,
        hash,
        mtime: file.stat.mtime,
        content: await this.app.vault.read(file),
        deleted: false
      });
    }
    console.info(`Uploading ${uploads.length} files...`);
    await this.uploadChanges(uploads);
    console.info("File upload complete");
    if (this.settings.deletionQueue.length > 0) {
      console.info(`Processing ${this.settings.deletionQueue.length} deletions...`);
      await this.uploadChanges(this.settings.deletionQueue.map((fileId) => ({
        fileId,
        hash: "",
        mtime: Date.now(),
        content: "",
        deleted: true
      })));
      this.settings.deletionQueue = [];
      await this.saveSettings();
      console.info("Deletions complete");
    }
    console.info("Resync complete");
    new import_obsidian.Notice("Resync complete");
    this.statusBarItemEl.setText("Last sync: " + new Date().toLocaleTimeString());
  }
  async sync() {
    if (this.syncPaused) {
      this.statusBarItemEl.setText("Sync paused");
      return;
    }
    if (this.syncing) {
      console.info("Sync already in progress, skipping...");
      return;
    }
    this.syncing = true;
    try {
      if (Date.now() - this.lastFullRehash > this.settings.fullRehashInterval * 6e4) {
        console.info("Performing periodic full rehash...");
        this.hashCache.clear();
        this.lastFullRehash = Date.now();
      }
      this.statusBarItemEl.setText("Syncing...");
      console.info("Syncing...");
      const files = await getAllFiles(this.app.vault);
      console.info("Number of files:", files.length);
      console.debug("Files:", files.map((file) => file.path));
      console.debug("Deletion queue:", this.settings.deletionQueue);
      if (this.settings.deletionQueue.length > 0) {
        await this.uploadChanges(this.settings.deletionQueue.map((fileId) => ({
          fileId,
          hash: "",
          mtime: Date.now(),
          content: "",
          deleted: true
        })));
        this.settings.deletionQueue = [];
        await this.saveSettings();
      }
      console.info("Downloading remote changes...");
      const remoteChanges = await this.downloadState();
      const toUpload = [];
      const toDownload = [];
      console.info("Checking for changes...");
      const checkStart = performance.now();
      for (const file of files) {
        let hash = this.hashCache.get(file.path);
        if (!hash) {
          hash = await hashFile(file);
          this.hashCache.set(file.path, hash);
        }
        const remoteFile = remoteChanges[file.path];
        if (!remoteFile) {
          toUpload.push({
            fileId: file.path,
            hash,
            mtime: file.stat.mtime,
            content: await this.app.vault.read(file),
            deleted: false
          });
        } else if (remoteFile.hash !== hash) {
          hash = await hashFile(file);
          this.hashCache.set(file.path, hash);
          if (remoteFile.hash !== hash) {
            if (remoteFile.mtime > file.stat.mtime) {
              toDownload.push(file.path);
            } else {
              toUpload.push({
                fileId: file.path,
                hash,
                mtime: file.stat.mtime,
                content: await this.app.vault.read(file),
                deleted: false
              });
            }
          }
        }
      }
      const totalCheckTime = performance.now() - checkStart;
      console.info(`Change detection completed in ${totalCheckTime.toFixed(2)}ms`);
      console.info("Found local changes:", toUpload.length, "remote changes:", toDownload.length);
      console.info("Checking for remote-only files...");
      const remoteFiles = Object.keys(remoteChanges);
      const localFiles = files.map((file) => file.path);
      const remoteOnly = remoteFiles.filter((file) => !localFiles.includes(file));
      for (const fileId of remoteOnly) {
        const remoteFile = remoteChanges[fileId];
        if (!remoteFile.deleted) {
          toDownload.push(fileId);
        }
      }
      console.info("Uploading changes:", toUpload.length);
      if (toUpload.length > 0) {
        await this.uploadChanges(toUpload);
      }
      console.info("Downloading remote files:", toDownload.length);
      if (toDownload.length > 0) {
        const remoteFiles2 = await this.downloadFiles(toDownload);
        console.debug(remoteFiles2);
        console.info("Processing remote files...");
        for (const file of remoteFiles2) {
          if (file.deleted) {
            console.info("Deleting file:", file.fileId);
            const localFile = this.app.vault.getFileByPath(file.fileId);
            if (localFile) {
              await this.app.vault.delete(localFile);
            }
          } else {
            const localFile = this.app.vault.getFileByPath(file.fileId);
            if (!localFile) {
              console.info("Creating file:", file.fileId);
              const path = file.fileId.split("/");
              let folderPath = "";
              for (let i = 0; i < path.length - 1; i++) {
                folderPath += path[i];
                const folder = this.app.vault.getFileByPath(folderPath);
                if (!folder) {
                  console.info("Creating folder:", folderPath);
                  await this.app.vault.createFolder(folderPath);
                }
                folderPath += "/";
              }
              await this.app.vault.create(file.fileId, file.content);
            } else {
              console.info("Updating file:", file.fileId);
              await this.app.vault.modify(localFile, file.content);
            }
          }
        }
      }
      this.settings.lastSync = Date.now();
      await this.saveSettings();
      console.info("Sync complete");
      this.statusBarItemEl.setText("Last sync: " + new Date().toLocaleTimeString());
    } catch (error) {
      this.statusBarItemEl.setText("Sync failed");
      console.error("Sync error:", error);
    } finally {
      this.syncing = false;
    }
  }
  async uploadChanges(toUpload) {
    const response = await fetch(`${this.settings.serverUrl}/v1/${this.settings.vaultId}/uploadChanges`, {
      method: "POST",
      headers: {
        "Accept-Encoding": "gzip",
        "Content-Type": "application/json",
        "X-API-Key": this.settings.apiKey
      },
      body: JSON.stringify({ "data": toUpload })
    });
    if (!response.ok) {
      throw new Error(`Upload failed: ${response.statusText}`);
    }
  }
  async handleFileDeletion(file) {
    this.settings.deletionQueue.push(file.path);
    this.hashCache.invalidate(file.path);
    await this.saveSettings();
  }
  async handleFileRename(file, oldPath) {
    this.settings.deletionQueue.push(oldPath);
    this.hashCache.invalidate(file.path);
    await this.saveSettings();
  }
  async downloadState() {
    const response = await fetch(
      `${this.settings.serverUrl}/v1/${this.settings.vaultId}/state`,
      {
        headers: {
          "Accept-Encoding": "gzip",
          "X-API-Key": this.settings.apiKey,
          "Content-Encoding": "gzip"
        }
      }
    );
    if (!response.ok) {
      throw new Error(`Download failed: ${response.statusText}`);
    }
    return await response.json().then((data) => {
      console.debug(data);
      return data.state;
    });
  }
  async downloadFiles(files) {
    const response = await fetch(`${this.settings.serverUrl}/v1/${this.settings.vaultId}/downloadFiles`, {
      method: "POST",
      headers: {
        "Accept-Encoding": "gzip",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json",
        "X-API-Key": this.settings.apiKey
      },
      body: JSON.stringify({ files })
    });
    if (!response.ok) {
      throw new Error(`Download failed: ${response.statusText}`);
    }
    return await response.json().then((data) => {
      console.debug(data);
      return data.files;
    });
  }
  async getAllFilesFromServer() {
    const response = await fetch(
      `${this.settings.serverUrl}/v1/${this.settings.vaultId}/allFiles`,
      {
        headers: {
          "Accept-Encoding": "gzip",
          "Content-Encoding": "gzip",
          "X-API-Key": this.settings.apiKey
        }
      }
    );
    if (!response.ok) {
      throw new Error(`Failed to get files: ${response.statusText}`);
    }
    return await response.json();
  }
  async getFileHistory(fileId) {
    const encodedFileId = encodeURIComponent(fileId);
    const response = await fetch(
      `${this.settings.serverUrl}/v1/${this.settings.vaultId}/fileHistory/${encodedFileId}`,
      {
        headers: {
          "Accept-Encoding": "gzip",
          "Content-Encoding": "gzip",
          "X-API-Key": this.settings.apiKey
        }
      }
    );
    if (!response.ok) {
      throw new Error(`Failed to get file history: ${response.statusText}`);
    }
    return await response.json();
  }
};
var SimpleSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Server URL").setDesc("The URL of the sync server").addText((text) => text.setPlaceholder("Enter server URL").setValue(this.plugin.settings.serverUrl).onChange(async (value) => {
      this.plugin.settings.serverUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("The API key for authentication").addText((text) => text.setPlaceholder("Enter API key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Interval").setDesc("The interval (in seconds) at which to sync").addText((text) => text.setPlaceholder("Enter sync interval").setValue(this.plugin.settings.syncInterval.toString()).onChange(async (value) => {
      this.plugin.settings.syncInterval = parseInt(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Pause Sync").setDesc("Pause the sync process").addButton((button) => button.setButtonText("Pause").setCta().onClick(async () => {
      this.plugin.syncPaused = true;
      new import_obsidian.Notice("Sync paused");
    }));
    new import_obsidian.Setting(containerEl).setName("Resume Sync").setDesc("Resume the sync process").addButton((button) => button.setButtonText("Resume").setCta().onClick(async () => {
      this.plugin.syncPaused = false;
      new import_obsidian.Notice("Sync resumed");
    }));
    new import_obsidian.Setting(containerEl).setName("Force Resync").setDesc("Push local state to the remote server").addButton((button) => button.setButtonText("Resync").setCta().onClick(async () => {
      await this.plugin.resync();
      new import_obsidian.Notice("Resync initiated");
    }));
    new import_obsidian.Setting(containerEl).setName("Vault ID").setDesc("The ID of the vault to sync").addText((text) => text.setPlaceholder("Enter vault ID").setValue(this.plugin.settings.vaultId).onChange(async (value) => {
      this.plugin.settings.vaultId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Full Rehash Interval").setDesc("How often (in minutes) to perform a full rehash of all files").addText((text) => text.setPlaceholder("Enter full rehash interval").setValue(this.plugin.settings.fullRehashInterval.toString()).onChange(async (value) => {
      const interval = parseInt(value);
      if (!isNaN(interval) && interval > 0) {
        this.plugin.settings.fullRehashInterval = interval;
        await this.plugin.saveSettings();
      }
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
